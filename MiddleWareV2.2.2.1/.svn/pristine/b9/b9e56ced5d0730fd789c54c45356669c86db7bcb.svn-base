package com.zkhk.dao.Impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.jdbc.support.rowset.SqlRowSet;
import org.springframework.stereotype.Repository;
import org.springframework.util.StringUtils;

import com.zkhk.constants.Constants;
import com.zkhk.dao.DocHealthExamDao;
import com.zkhk.entity.MemDisease;
import com.zkhk.jdbc.JdbcService;
import com.zkhk.util.TimeUtil;

/**
 * @ClassName:     DocHealthExamDaoImpl.java 
 * @Description:   健康体检
 * @author         liuxiaoqin  
 * @version        V1.0   
 * @Date           2016年03月23日 下午4:13:46
*****/
@Repository(value="docHealthExamDao")
public class DocHealthExamDaoImpl implements DocHealthExamDao{
    
    @Resource
    private JdbcService jdbcService;
    
    /** 
     * @Title: findLineNum 
     * @Description: 获取行号，新增疾病的时候需要
     * @param request
     * @author liuxiaoqin
     * @createDate 2016-03-22
     * @throws Exception    
     * @retrun Integer
     */
    public Integer findLineNum(Integer memberId,Integer diseaseId) throws Exception{
        int count = 0;
        String sql = " SELECT LineNum FROM mem3 where DiseaseID = ? AND Memberid = ? ORDER BY LineNum DESC LIMIT 1 ";
        SqlRowSet rowSet = jdbcService.query(sql, new Object[]{diseaseId,memberId});
        while(rowSet.next()) {
            count = rowSet.getInt("LineNum");
        }
        return count;
    }
    
    /** 
     * @Title: findMaxLineNum 
     * @Description: 获取最大行号
     * @param request
     * @author liuxiaoqin
     * @createDate 2016-03-22
     * @throws Exception    
     * @retrun Integer
     */
    public Integer findMaxLineNum(Integer memberId) throws Exception{
        int count = 0;
        String sql = " SELECT LineNum FROM mem3 where  Memberid = ? ORDER BY LineNum DESC LIMIT 1 ";
        SqlRowSet rowSet = jdbcService.query(sql, new Object[]{memberId});
        while(rowSet.next()) {
            count = rowSet.getInt("LineNum");
        }
        return count;
    }
    
    /** 
     * @Title: memHasTheDisease 
     * @Description: 医生查询该会员是否已经有这个疾病。
     * @param request
     * @author liuxiaoqin
     * @createDate 2016-03-22
     * @throws Exception    
     * @retrun Integer
     */
    public Integer memHasTheDisease(MemDisease param) throws Exception{
        int count = 0;
        String sql = " SELECT COUNT(Memberid) FROM mem3 where DiseaseID = ? AND Memberid = ? AND LineNum = ? ";
        count = jdbcService.queryForInt(sql, new Object[]{param.getDiseaseId(),param.getMemberId(),param.getLineNum()});
        return count;
    }
    
    /** 
     * @Title: addMemDiseases 
     * @Description: 医生新增会员的疾病史
     * @param request
     * @author liuxiaoqin
     * @createDate 2016-03-22
     * @throws Exception    
     * @retrun Integer
     */
    public Integer addMemDiseases(MemDisease param) throws Exception{
        int count = 0;
        String sql = "";
        String digTime = param.getDiagTime();
        if(!StringUtils.isEmpty(digTime)){
        	sql = " INSERT INTO mem3 (Memberid,LineNum,DiseaseID,DiseaseName,DiagTime,CreateTime) VALUES(?,?,?,?,?,?) ";
            count = jdbcService.doExecuteSQL(sql, new Object[]{param.getMemberId(),param.getLineNum(),param.getDiseaseId(),param.getDiseaseName(),param.getDiagTime(),new Date()});
        }else{
        	sql = " INSERT INTO mem3 (Memberid,LineNum,DiseaseID,DiseaseName,CreateTime) VALUES(?,?,?,?,?) ";
            count = jdbcService.doExecuteSQL(sql, new Object[]{param.getMemberId(),param.getLineNum(),param.getDiseaseId(),param.getDiseaseName(),new Date()});
        }
        return count;
    }
    
    /** 
     * @Title: findVisitRecord 
     * @Description: 查询会员是否有随访记录
     * @param request
     * @author liuxiaoqin
     * @createDate 2016-03-22
     * @throws Exception    
     * @retrun Integer
     */
    public Integer findVisitRecord(Integer memberId,Integer diseaseId) throws Exception{
        int count = 0;
        String sql = "";
        if(diseaseId == 2){
            sql = " SELECT COUNT(DiabetesID) FROM ph_diabetes where MemberID = ? ";
        }
        if(diseaseId == 1){
            sql = " SELECT COUNT(HypertensionID) FROM ph_hypertension where  MemberID = ? ";
        }
        count = jdbcService.queryForInt(sql, new Object[]{memberId});
        return count;
    }
    
    /** 
     * @Title: deleteMemDiseases 
     * @Description: 医生删除会员的疾病史
     * @param request
     * @author liuxiaoqin
     * @createDate 2016-03-22
     * @throws Exception    
     * @retrun Integer
     */
    public Integer deleteMemDiseases(MemDisease param) throws Exception{
        int count = 0;
        String sql = " DELETE FROM mem3 WHERE Memberid = ? AND LineNum = ? AND DiseaseID = ? ";
        count = jdbcService.doExecuteSQL(sql, new Object[]{param.getMemberId(),param.getLineNum(),param.getDiseaseId()});
        return count;
    }
    
    /** 
     * @Title: findMemDiseases 
     * @Description: 医生查询该会员是否已经有这个疾病。
     * @param request
     * @author liuxiaoqin
     * @createDate 2016-03-22
     * @throws Exception    
     * @retrun List<MemDiseaser>
     */
    public List<MemDisease> findMemDiseases(Integer memberId) throws Exception{
        List<MemDisease> list = new ArrayList<MemDisease>();
        String sql = " SELECT Memberid,LineNum,DiseaseID,DiseaseName,DiagTime FROM mem3 WHERE Memberid = ? ORDER BY DiagTime DESC ";
        SqlRowSet rowSet = jdbcService.query(sql, new Object[]{memberId});
        while(rowSet.next()) {
            MemDisease disease = new MemDisease();
            disease.setMemberId(memberId);
            disease.setLineNum(rowSet.getInt("LineNum"));
            disease.setDiseaseId(rowSet.getInt("DiseaseID"));
            disease.setDiseaseName(rowSet.getString("DiseaseName"));
            Date date = rowSet.getDate("DiagTime");
            if(date != null){
                String diagTime = TimeUtil.formatDate(date);
                disease.setDiagTime(diagTime);
            }
            int diseaseId = disease.getDiseaseId();
            if(diseaseId == 1 || diseaseId == 2){
                int count = findVisitRecord(disease.getMemberId(),disease.getDiseaseId());
                if(count > 0){
                    disease.setHasVisitRecord(1);
                }else{
                    disease.setHasVisitRecord(0);
                }
            }else{
                disease.setHasVisitRecord(0);
            }
            list.add(disease);
            
        }
        return list;
    }
    
    /** 
     * @Title: getMemFamilyHistory 
     * @Description: 医生查询会员的家族史 
     * @author liuxiaoqin
     * @createDate 2016-03-22
     * @param memberId
     * @return
     * @throws Exception    
     * @retrun List<Map<String,Object>>
     */
    public List<Map<String,Object>> getMemFamilyHistory(Integer memberId) throws Exception{
        List<Map<String,Object>> map = new ArrayList<Map<String,Object>>();
        String sql = " SELECT * FROM mem4 WHERE Memberid = ? ";
        SqlRowSet rowSet = jdbcService.query(sql, new Object[]{memberId});
        while(rowSet.next()) {
            Map<String,Object> newMap = new HashMap<String, Object>();
            newMap.put("memberId", rowSet.getInt("Memberid"));
            newMap.put("relation", rowSet.getString("Relation"));
            String diseaseNames = "";
            String hypertension = rowSet.getString("Hypertension");
            if(!StringUtils.isEmpty(hypertension) && hypertension.equals("Y")){
            	if(diseaseNames.length() > 0){
            		diseaseNames += Constants.ZN_STRING_SEPARATE + Constants.DISEASE_HYPERTENSION;
            	}else{
            		diseaseNames += Constants.DISEASE_HYPERTENSION;
            	}
            }
            String diabMell = rowSet.getString("DiabMell");
            if(!StringUtils.isEmpty(diabMell) && diabMell.equals("Y")){
            	if(diseaseNames.length() > 0){
            		diseaseNames += Constants.ZN_STRING_SEPARATE + Constants.DISEASE_DIABMELL;
            	}else{
            		diseaseNames += Constants.DISEASE_DIABMELL;
            	}
            }
            String coronaryHeart = rowSet.getString("CoronaryHeart");
            if(!StringUtils.isEmpty(coronaryHeart) && coronaryHeart.equals("Y")){
            	if(diseaseNames.length() > 0){
            		diseaseNames += Constants.ZN_STRING_SEPARATE + Constants.DISEASE_CORONARY_HEART;
            	}else{
            		diseaseNames += Constants.DISEASE_CORONARY_HEART;
            	}
            }
            String cancer = rowSet.getString("Cancer");
            if(!StringUtils.isEmpty(cancer) && cancer.equals("Y")){
            	if(diseaseNames.length() > 0){
            		diseaseNames += Constants.ZN_STRING_SEPARATE + Constants.DISEASE_CANCER;
            	}else{
            		diseaseNames += Constants.DISEASE_CANCER;
            	}
            }
            String migraine = rowSet.getString("Migraine");
            if(!StringUtils.isEmpty(migraine) && migraine.equals("Y")){
            	if(diseaseNames.length() > 0){
            		diseaseNames += Constants.ZN_STRING_SEPARATE + Constants.DISEASE_MIGRAINE;
            	}else{
            		diseaseNames += Constants.DISEASE_MIGRAINE;
            	}
            }
            String lungDisease = rowSet.getString("LungDisease");
            if(!StringUtils.isEmpty(lungDisease) && lungDisease.equals("Y")){
            	if(diseaseNames.length() > 0){
            		diseaseNames += Constants.ZN_STRING_SEPARATE + Constants.DISEASE_LUNG_DISEASE;
            	}else{
            		diseaseNames += Constants.DISEASE_LUNG_DISEASE;
            	}
            }
            String depression = rowSet.getString("Depression");
            if(!StringUtils.isEmpty(depression) && depression.equals("Y")){
            	if(diseaseNames.length() > 0){
            		diseaseNames += Constants.ZN_STRING_SEPARATE + Constants.DISEASE_DEPRESSION;
            	}else{
            		diseaseNames += Constants.DISEASE_DEPRESSION;
            	}
            }
            String hepatitis = rowSet.getString("Hepatitis");
            if(!StringUtils.isEmpty(hepatitis) && hepatitis.equals("Y")){
            	if(diseaseNames.length() > 0){
            		diseaseNames += Constants.ZN_STRING_SEPARATE + Constants.DISEASE_HEPATITIS;
            	}else{
            		diseaseNames += Constants.DISEASE_HEPATITIS;
            	}
            }
            String stroke = rowSet.getString("Stroke");
            if(!StringUtils.isEmpty(stroke) && stroke.equals("Y")){
            	if(diseaseNames.length() > 0){
            		diseaseNames += Constants.ZN_STRING_SEPARATE + Constants.DISEASE_STROKE;
            	}else{
            		diseaseNames += Constants.DISEASE_STROKE;
            	}
            }
            String hipJoint = rowSet.getString("HipJoint");
            if(!StringUtils.isEmpty(hipJoint) && hipJoint.equals("Y")){
            	if(diseaseNames.length() > 0){
            		diseaseNames += Constants.ZN_STRING_SEPARATE + Constants.DISEASE_HIPJOINT;
            	}else{
            		diseaseNames += Constants.DISEASE_HIPJOINT;
            	}
            }
            String senileDementia = rowSet.getString("SenileDementia");
            if(!StringUtils.isEmpty(senileDementia) && senileDementia.equals("Y")){
            	if(diseaseNames.length() > 0){
            		diseaseNames += Constants.ZN_STRING_SEPARATE + Constants.DISEASE_SENILE_DEMENTIA;
            	}else{
            		diseaseNames += Constants.DISEASE_SENILE_DEMENTIA;
            	}
            }
            String gout = rowSet.getString("Gout");
            if(!StringUtils.isEmpty(gout) && gout.equals("Y")){
            	if(diseaseNames.length() > 0){
            		diseaseNames += Constants.ZN_STRING_SEPARATE + Constants.DISEASE_GOUT;
            	}else{
            		diseaseNames += Constants.DISEASE_GOUT;
            	}
            }
            String tag = rowSet.getString("Tag");
            if(!StringUtils.isEmpty(tag) && tag.equals("Y")){
            	String diseaseName = rowSet.getString("DiseaseName");
            	if(diseaseNames.length() > 0){
            		diseaseNames += Constants.ZN_STRING_SEPARATE + Constants.DISEASE_OTHER + diseaseName;
            	}else{
            		diseaseNames += Constants.DISEASE_OTHER + diseaseName;
            	}
            }
            newMap.put("diseaseName", diseaseNames);
            map.add(newMap);
        }
        return map;
    }
    
    /** 
     * @Title: getMemGroup 
     * @Description: 医生查询会员的分组 
     * @author liuxiaoqin
     * @createDate 2016-03-22
     * @param memberId
     * @return
     * @throws Exception    
     * @retrun List<Map<String,Object>>
     */
    public List<Map<String,Object>> getMemGroup(Integer memberId) throws Exception{
        List<Map<String,Object>> map = new ArrayList<Map<String,Object>>();
        String sql = " SELECT e.Memberid,f.Path,f.OrgId,g.OrgName AS orgName FROM ompb e LEFT JOIN omgs f ON e.MemGrpid = f.MemGrpid "
        		   + " LEFT JOIN orgs g ON f.OrgId = g.OrgId where e.Memberid = ? ORDER BY e.MemGrpid ";
        SqlRowSet rowSet = jdbcService.query(sql, new Object[]{memberId});
        List<String> list = new ArrayList<String>();
        while(rowSet.next()) {
            String path = rowSet.getString("Path");
            String memGrpName = "";
            String orgName = rowSet.getString("orgName");
            String groupName = "";
            if(!StringUtils.isEmpty(path)){
                String memGrpids = path.substring(1, path.length()-1);
                String newSql = " SELECT GROUP_CONCAT(MemGrpName) as memGrpName FROM omgs WHERE MemGrpid IN ("+ memGrpids +") ";
                SqlRowSet newRowSet = jdbcService.query(newSql);
                while(newRowSet.next()){
                    memGrpName = newRowSet.getString("memGrpName");
                }
            }
            groupName = orgName +","+ memGrpName;
            if(!StringUtils.isEmpty(path)){
            	list.add(groupName);
            }
        }
        if(list.size() > 0){
            for(int i= 0;i <list.size();i++){
            	Map<String,Object> newMap = new HashMap<String, Object>();
                int id = i+1;
                String memGrpId = "分组" + id;
                String name = StringUtils.replace(list.get(i), ",", "->> ");
                newMap.put("memGrpId", memGrpId);
                newMap.put("memGrpName",name);
                map.add(newMap);
            }
        }
        return map;
    }
    
    /** 
     * @Title: getMemEmergencyContact 
     * @Description: 医生查询会员的紧急联系人
     * @author liuxiaoqin
     * @createDate 2016-03-22
     * @param memberId
     * @return
     * @throws Exception    
     * @retrun Map<String,Object>
     */
    public List<Map<String,Object>> getMemEmergencyContact(Integer memberId) throws Exception{
    	List<Map<String,Object>> mapList = new ArrayList<Map<String,Object>>();
        String sql = " SELECT DISTINCT Memberid,Relation,ContactName,ContactMobPhone,MessageTag,ReceiveTag FROM mem1 WHERE Memberid = ? ";
        SqlRowSet rowSet = jdbcService.query(sql, new Object[]{memberId});
        while(rowSet.next()) {
        	Map<String,Object> map = new HashMap<String,Object>();
            map.put("memberId", rowSet.getInt("Memberid"));
            map.put("contactName", rowSet.getString("ContactName"));
            map.put("contactMobPhone", rowSet.getString("ContactMobPhone"));
            map.put("relation", rowSet.getString("Relation"));
            String messageTag = rowSet.getString("MessageTag");
            if(StringUtils.isEmpty(messageTag)){
            	messageTag = "N";
            }
            map.put("messageTag",messageTag );
            String receiveTag = rowSet.getString("ReceiveTag");
            if(StringUtils.isEmpty(receiveTag)){
            	receiveTag = "N";
            }
            map.put("receiveTag",receiveTag);
            mapList.add(map);
        }
        return mapList;
    }
    
    /** 
     * @Title: getMemLifeStyle 
     * @Description: 医生查询会员的生活习惯
     * @author liuxiaoqin
     * @createDate 2016-03-22
     * @param memberId
     * @return
     * @throws Exception    
     * @retrun Map<String,Object>
     */
    public Map<String,Object> getMemLifeStyle(Integer memberId) throws Exception{
        Map<String,Object> map = new HashMap<String,Object>();
        String sql = " SELECT DISTINCT Memberid,Smoking,DoDrink,DoNtFood,StapleFood,SleepCond,LikeSports,MoveLong,TimeSeg,WeekNumTimes FROM mem7 WHERE Memberid = ? ";
        SqlRowSet rowSet = jdbcService.query(sql, new Object[]{memberId});
        while(rowSet.next()) {
            map.put("memberId", rowSet.getInt("Memberid"));
            String smoking = rowSet.getString("Smoking");
            if(StringUtils.isEmpty(smoking)){
            	smoking = "N";
            }
            map.put("smoking",smoking);
            String doDrink = rowSet.getString("DoDrink");
            if(StringUtils.isEmpty(doDrink)){
            	doDrink = "N";
            }
            map.put("doDrink", doDrink);
            map.put("doNtFood", rowSet.getString("DoNtFood"));
            map.put("stapleFood", rowSet.getString("StapleFood"));
            map.put("sleepCond", rowSet.getString("SleepCond"));
            map.put("likeSports", rowSet.getString("LikeSports"));
            map.put("moveLong", rowSet.getString("MoveLong"));
            String timeSeg = rowSet.getString("TimeSeg");
            String timePeriod = "";
            if(!StringUtils.isEmpty(timeSeg)){
            	if(timeSeg.equals("0")){
            		timePeriod = Constants.SPORT_PERIOD_0;
            	}else if(timeSeg.equals("1")){
            		timePeriod = Constants.SPORT_PERIOD_1;
            	}else if(timeSeg.equals("2")){
            		timePeriod = Constants.SPORT_PERIOD_2;
            	}else if(timeSeg.equals("3")){
            		timePeriod = Constants.SPORT_PERIOD_3;
            	}else if(timeSeg.equals("4")){
            		timePeriod = Constants.SPORT_PERIOD_4;
            	}else if(timeSeg.equals("5")){
            		timePeriod = Constants.SPORT_PERIOD_5;
            	}else if(timeSeg.equals("6")){
            		timePeriod = Constants.SPORT_PERIOD_6;
            	}else if(timeSeg.equals("7")){
            		timePeriod = Constants.SPORT_PERIOD_7;
            	}else if(timeSeg.equals("8")){
            		timePeriod = Constants.SPORT_PERIOD_8;
            	}
            }
            map.put("timeSeg",timePeriod);
            map.put("weekNumTimes", rowSet.getInt("WeekNumTimes"));
        }
        return map;
    }
    
    /** 
     * @Title: getMemPhysicalExamination 
     * @Description: 医生查询会员的体格检查
     * @author liuxiaoqin
     * @createDate 2016-03-22
     * @param memberId
     * @return
     * @throws Exception    
     * @retrun Map<String,Object>
     */
    public Map<String,Object> getMemPhysicalExamination(Integer memberId) throws Exception{
        Map<String,Object> map = new HashMap<String,Object>();
        String sql = " SELECT DISTINCT Memberid,BloodType,AllergicHis,AllergicHisName,Height,Weight,Waist,Hip,Pulse,HeartRate,BloodH,BloodL,FastingGlucose,"
                   + " UricAcid,TotalCholesterol,Triglyceride,DensityLipop,LDLip FROM mem2 WHERE Memberid = ? ";
        SqlRowSet rowSet = jdbcService.query(sql, new Object[]{memberId});
        while(rowSet.next()) {
            map.put("memberId", rowSet.getInt("Memberid"));
            map.put("bloodType", rowSet.getString("BloodType"));
            map.put("allergicHis", rowSet.getString("AllergicHis"));
            map.put("allergicHisName", rowSet.getString("AllergicHisName"));
            map.put("height", rowSet.getInt("Height"));
            map.put("weight", rowSet.getDouble("Weight"));
            map.put("waist", rowSet.getInt("Waist"));
            map.put("hip", rowSet.getInt("Hip"));
            map.put("pulse", rowSet.getInt("Pulse"));
            map.put("heartRate", rowSet.getInt("HeartRate"));
            map.put("bloodH", rowSet.getInt("BloodH"));
            map.put("bloodL", rowSet.getInt("BloodL"));
            map.put("fastingGlucose", rowSet.getDouble("FastingGlucose"));
            map.put("uricAcid", rowSet.getInt("UricAcid"));
            map.put("totalCholesterol", rowSet.getDouble("TotalCholesterol"));
            map.put("triglyceride", rowSet.getDouble("Triglyceride"));
            map.put("densityLipop", rowSet.getDouble("DensityLipop"));
            map.put("lDLip", rowSet.getDouble("LDLip"));
        }
        return map;
    }
    
    /** 
     * @Title: getMemBasicInfo 
     * @Description: 医生查询会员的基本信息
     * @author liuxiaoqin
     * @createDate 2016-03-22
     * @param memberId
     * @return
     * @throws Exception    
     * @retrun Map<String,Object>
     */
    public Map<String,Object> getMemBasicInfo(Integer memberId) throws Exception{
        Map<String,Object> map = new HashMap<String,Object>();
        String sql = " SELECT DISTINCT a.Memberid,a.LogName,a.MemName,a.Gender,a.BirthDate,a.Tel,a.Email,a.IdCard,a.NativeAddr,a.Address, "
                   + " a.MarryStatus,a.EducationStatus,a.Occupation,a.DocName,b.unique_id,b.relation,b.company,b.neighborhood_committee,b.province,b.city,b.area,b.village, "
                   + " b.live_status,b.nation,b.pay_type,b.other_pay,b.medical_account,b.agro_account,b.fetation_status,b.certificate_type,"
                   + " b.file_type,b.file_status,b.family_code,c.MemName AS memType,c.MemDesc AS memTypeDesc "
                   + " FROM omem a LEFT JOIN d_omem_relation b ON a.unique_id = b.unique_id LEFT JOIN omes c ON a.MemId = c.MemId WHERE a.Memberid = ? AND a.UseTag = 'T' ";
        SqlRowSet rowSet = jdbcService.query(sql, new Object[]{memberId});
        while(rowSet.next()) {
            map.put("memberId", rowSet.getInt("Memberid"));
            map.put("logName", rowSet.getString("LogName"));
            map.put("memName", rowSet.getString("MemName"));
            map.put("birthDate", rowSet.getString("BirthDate"));
            map.put("gender", rowSet.getString("Gender"));
            map.put("email", rowSet.getString("Email"));
            map.put("tel", rowSet.getString("Tel"));
            map.put("idcard", rowSet.getString("IdCard"));
            map.put("nativeAddr", rowSet.getString("NativeAddr"));
            map.put("address", rowSet.getString("Address"));
            map.put("marryStatus", rowSet.getString("MarryStatus"));
            map.put("educationStatus", rowSet.getString("EducationStatus"));
            map.put("occupation", rowSet.getString("Occupation"));
            map.put("docName", rowSet.getString("DocName"));
            map.put("uniqueId", rowSet.getString("unique_id"));
            map.put("relation", rowSet.getInt("relation"));
            map.put("company", rowSet.getString("company"));
            String neighborhood = rowSet.getString("neighborhood_committee");
            map.put("administrativeArea", neighborhood);
            map.put("liveStatus", rowSet.getInt("live_status"));
            map.put("nation", rowSet.getString("nation"));
            map.put("payType", rowSet.getInt("pay_type"));
            map.put("otherPay", rowSet.getString("other_pay"));
            map.put("medicalAccount", rowSet.getString("medical_account"));
            map.put("agroAccount", rowSet.getString("agro_account"));
            map.put("fetationStatus", rowSet.getInt("fetation_status"));
            Integer certificateType = rowSet.getInt("certificate_type");
            if(certificateType == null || certificateType == 0){
            	certificateType = 1;
            }
            map.put("certificateType",certificateType);
            map.put("fileType", rowSet.getInt("file_type"));
            map.put("fileStatus", rowSet.getInt("file_status"));
            map.put("familyCode", rowSet.getString("family_code"));
            map.put("memType", rowSet.getString("memType"));
            map.put("memTypeDesc", rowSet.getString("memTypeDesc"));
        }
        return map;
    }
    
    /** 
     * @Title: findTcmOrAgedQuestionnaire 
     * @Description: 获取中医体质和老年人生活能力评估问卷
     * @author liuxiaoqin
     * @createDate 2016-03-22
     * @param memberId
     * @return
     * @throws Exception    
     * @retrun Map<String,Object>
     */
    public Map<String,Object> findTcmOrAgedQuestionnaire(Integer memberId,Long hExamID,String QuestionType) throws Exception{
    	 Map<String,Object> map = new HashMap<String,Object>();
    	 String questName = "";
    	 if(QuestionType.equals("aged")){
    		 questName = Constants.AGED_QUESTIONNAIRE;
    	 }else{
    		 questName = Constants.TCM_QUESTIONNAIRE;
    	 }
    	 String sql = "";
    	 if(hExamID != null && hExamID >0){
    		 sql = " SELECT	a.AnsNumber,a.Qustid,b.Qustname,b.CreateDate FROM ouai a LEFT JOIN  "
                     + " (SELECT Qustid,Qustname,CreateDate FROM omfq WHERE  Qustname = '"+questName+"' ORDER BY QustVer DESC LIMIT 1) b "
                     + " ON a.Qustid = b.Qustid WHERE a.HExamID = "+ hExamID+" AND a.Memberid = "+memberId+" ORDER BY a.AnsNumber DESC ";
    	 }else{
    		 sql = " SELECT NULL AS AnsNumber,Qustid,Qustname,CreateDate FROM omfq WHERE  Qustname = '"+questName+"' ORDER BY QustVer DESC LIMIT 1 ";
    	 }
    	 SqlRowSet rowSet = jdbcService.query(sql);
    	 while(rowSet.next()){
    		 Integer ansNumber = rowSet.getInt("AnsNumber");
    		 Integer qustId = rowSet.getInt("Qustid");
    		 String qustName = rowSet.getString("Qustname");
    		 String publisherTime = "";
    		 Date date = rowSet.getDate("CreateDate");
    		 if(date != null){
    			 publisherTime = TimeUtil.formatDatetime2(date);
    		 }
    		 List<Map<String,Object>> problemList = new ArrayList<Map<String,Object>>();
    		 /* 查询问卷的每个题目 begin */
    		 String sqlProblem = " SELECT Qustid,Problemid,ProDesc,LineNum FROM mfq1 WHERE Qustid = ? ORDER BY Problemid ";
    		 SqlRowSet problemSet = jdbcService.query(sqlProblem,new Object[]{qustId});
    		 while(problemSet.next()){
    			 Map<String,Object> problemMap = new HashMap<String,Object>();
    			 Integer proQustId = problemSet.getInt("Qustid");
    			 problemMap.put("qustId",proQustId);
    			 Integer problemId = problemSet.getInt("Problemid");
    			 problemMap.put("problemId",problemId);
    			 problemMap.put("proDesc",problemSet.getString("ProDesc"));
    			 problemMap.put("lineNum", problemSet.getInt("LineNum"));
    			 List<Map<String,Object>> optionList = new ArrayList<Map<String,Object>>();
    			 if(proQustId != null && proQustId >0){
    				 /* 查询每个问题的选项 begin */
    				 String optionSql = " SELECT Qustid,Problemid,Ansid,Description,Mark,Score FROM mfq11 WHERE Qustid = ? AND Problemid = ? ORDER BY Ansid ";
    	    		 SqlRowSet optionSet = jdbcService.query(optionSql,new Object[]{proQustId,problemId});
    	    		 while(optionSet.next()){
    	    			 Map<String,Object> optionMap = new HashMap<String,Object>();
    	    			 optionMap.put("qustId",optionSet.getInt("Qustid"));
    	    			 optionMap.put("problemId",optionSet.getInt("Problemid"));
    	    			 optionMap.put("ansId",optionSet.getInt("Ansid"));
    	    			 optionMap.put("description",optionSet.getString("Description"));
    	    			 optionMap.put("mark",optionSet.getString("Mark"));
    	    			 optionMap.put("score",optionSet.getDouble("Score"));
    	    			 optionList.add(optionMap);
    	    		 }
    				 /* 查询每个问题的选项 end */
    			 }
    			 problemMap.put("ansOptions", optionList);
    			 if(ansNumber != null && ansNumber > 0){
    			     Integer answerId = 0;
    			     String answerSql = " SELECT Ansid FROM uai21 WHERE AnsNumber = ? AND Problemid = ? ";
    			     SqlRowSet answerSet = jdbcService.query(answerSql,new Object[]{ansNumber,problemId});
    			     while(answerSet.next()){
    			         answerId = answerSet.getInt("Ansid");
    			     }
    			     problemMap.put("answerId", answerId);
    			 }
    			 problemList.add(problemMap);
    		 }
    		 /* 查询问卷的每个题目 end */
    		 map.put("ansNumber", ansNumber);
    		 map.put("qustId", qustId);
    		 map.put("qustName", qustName);
    		 map.put("publisherTime", publisherTime);
    		 map.put("problems", problemList);
    	 }
    	 return map;
    }
    
    /** 
     * @Title: findLastestHealthExamId 
     * @Description: 获取最新入库的健康体检的id
     * @param request
     * @author liuxiaoqin
     * @createDate 2016-06-03
     * @throws Exception    
     * @retrun Long
     */
    public Long findLastestHealthExamId(Date now) throws Exception{
        Long hExamID = 0l;
        String answerSql = " SELECT HExamID FROM ph_healthexam WHERE GetTime = ? ";
        SqlRowSet answerSet = jdbcService.query(answerSql,new Object[]{now});
        while(answerSet.next()){
            hExamID = answerSet.getLong("HExamID");
        }
        return hExamID;
    }
    
}

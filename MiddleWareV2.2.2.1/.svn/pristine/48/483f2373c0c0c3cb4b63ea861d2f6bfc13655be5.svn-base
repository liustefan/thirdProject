package com.zkhk.dao.Impl;

import javax.annotation.Resource;

import org.springframework.jdbc.support.rowset.SqlRowSet;
import org.springframework.stereotype.Repository;
import org.springframework.util.StringUtils;
import org.springframework.web.multipart.MultipartFile;

import com.zkhk.dao.MemDao;
import com.zkhk.entity.MemFile;
import com.zkhk.entity.MemLog;
import com.zkhk.entity.MemberStatus;
import com.zkhk.entity.Omem;
import com.zkhk.jdbc.JdbcService;
import com.zkhk.mongodao.MongoEntityDao;
import com.zkhk.util.PasswordEncryption;
import com.zkhk.util.TimeUtil;
@Repository(value="memDao")
public class MemDaoImpl implements MemDao {
    @Resource
	private JdbcService jdbcService;
    @Resource(name = "mongoEntityDao")
	private MongoEntityDao mongoEntityDao;
	public MemLog findUserbyNameAndPassWord(MemLog log) throws Exception {
	    String sql ="SELECT b.Memberid,a.CURTAG,a.`PassWord` FROM omem b  left join memlog a on a.memberId=b.Memberid  "
	    		  + "WHERE (b.TEL=? or b.Email=? or b.IdCard = ?) and  b.useTag='T';";
	    SqlRowSet rowSet=jdbcService.query(sql, new Object[]{log.getUserAccount(),log.getUserAccount(),log.getUserAccount()});
	    while(rowSet.next()){
	    	MemLog log2=new MemLog();
	    	log2.setMemberId(rowSet.getInt("Memberid"));
	    	log2.setCurTag(rowSet.getString("CURTAG"));
	    	log2.setPassWord(rowSet.getString("PassWord"));
	    	return log2;
	    }
		return null;
	}

	public void updateMemLogByMemberid(MemLog loginLog) throws Exception {
		String sql="UPDATE memlog SET SESSION=?,LOGINTIME=?,DEVICE=? WHERE MEMBERID=?";
		jdbcService.doExecuteSQL(sql, new Object[]{loginLog.getSession(),loginLog.getLoginTime(),loginLog.getDevice(),loginLog.getMemberId()} );
		
	}

	public boolean findUserBySessionAndId(String session, int memberId)
			throws Exception {
	    String sql ="SELECT 1 FROM memlog WHERE SESSION=? AND MEMBERID=?";
	    SqlRowSet rowSet=jdbcService.query(sql, new Object[]{session,memberId});
	    while(rowSet.next()){
	    	return true;
	    }
	
		return false;
	}

	public Omem findOmembyId(int memberId) throws Exception {
		String sql="select a.HeadAddress,a.LogName,a.OrgId,a.MemId,a.MemName,a.Gender,a.BirthDate,a.NativeAddr,a.Tel,"+
				          "a.Email,a.IdCard,a.Address,a.MarryStatus,a.EducationStatus,a.Occupation,a.Docid,a.DocName,a.UseTag,"+
			              "a.CreateTime,b.ContactMobPhone,b.ContactName,c.BloodType,c.Height,c.Weight "+
			       " from  omem a ,mem1 b ,mem2 c "+
			       "where  a.MemberId = ? and   b.Memberid = a.Memberid and   c.Memberid = a.Memberid";
		 SqlRowSet rowSet=jdbcService.query(sql, new Object[]{memberId});
		    while(rowSet.next()){
		    	Omem omem=new Omem();
		    	omem.setAddress(rowSet.getString("Address"));
		    	String birthDate = rowSet.getString("BirthDate");
		    	if(!StringUtils.isEmpty(birthDate)){
		    	    omem.setBirthDate(rowSet.getString("BirthDate"));
		    	}
		    	omem.setEducationStatus(rowSet.getInt("EducationStatus"));
		    	omem.setEmail(rowSet.getString("Email"));
		    	omem.setGender(rowSet.getString("Gender"));
		    	omem.setIdCard(rowSet.getString("IdCard"));
		    	omem.setMarryStatus(rowSet.getString("MarryStatus"));
		    	omem.setMemberId(memberId);
		    	omem.setMemId(rowSet.getInt("MemId"));
		    	omem.setMemName(rowSet.getString("MemName"));
		    	omem.setNativeAddr(rowSet.getString("NativeAddr"));
		    	omem.setOccupation(rowSet.getString("Occupation"));
		    	omem.setOrgId(rowSet.getInt("OrgId"));
		    	omem.setTel(rowSet.getString("Tel"));
		    	omem.setDocId(rowSet.getInt("DocId"));
		    	omem.setDocName(rowSet.getString("DocName"));
		    	omem.setCreateTime(TimeUtil.paserDatetime2(rowSet.getString("CreateTime")));
		    	omem.setHeadAddress(rowSet.getString("HeadAddress"));
		    	//jdbcService.getHeadImg(omem);
		    	omem.setVitality(findMemActiveIndexByMemberId(memberId));
		    	//omem.setHeadImg(ImageUtils.encodeImgageToBase64(ImageUtils.class.getResource("").getPath() + "12.jpg"));
		    	omem.setContactMobPhone(rowSet.getString("ContactMobPhone"));
		    	omem.setContactName(rowSet.getString("ContactName"));
		    	omem.setBloodType(rowSet.getString("BloodType"));
		    	omem.setHeight(rowSet.getString("Height"));
		    	omem.setWeight(rowSet.getString("Weight"));

		    	return omem;
		    }
		    return null;
	}

	/** 
	 * <p>Title: findMemFilebyId</p>  
	 * <p>Description:根据memberId来查询会员健康档案信息 </p>  
	 * @author liuxiaoqin
     * @createDate 2016-03-08
	 * @param memberId
	 * @return
	 * @throws Exception 
	 * @see com.zkhk.dao.MemDao#findMemFilebyId(int)  
	*/
	public MemFile findMemFilebyId(int memberId) throws Exception {
        String sql = " select distinct a.BloodType,a.AllergicHis,a.AllergicHisName,a.Height,a.Weight,a.Waist,a.Hip,a.Pulse,a.HeartRate,a.BloodH,a.BloodL,a.FastingGlucose, "
				   + " a.UricAcid,a.TotalCholesterol,a.Triglyceride,a.DensityLipop,a.LDLip from mem2 a where a.Memberid = ? ";
		SqlRowSet rowSet = jdbcService.query(sql, new Object[]{memberId});
		    while(rowSet.next()){
		    	MemFile file = new MemFile();
	            file.setAllergicHis(rowSet.getString("AllergicHis"));
	            file.setBloodH(rowSet.getInt("BloodH"));
	            file.setAllergicHisName(rowSet.getString("AllergicHisName"));
	            file.setBloodL(rowSet.getInt("BloodL"));
	            file.setBloodType(rowSet.getString("BloodType"));
	            file.setDensityLipop(rowSet.getFloat("DensityLipop"));
	            file.setFastingGlucose(rowSet.getFloat("FastingGlucose"));
	            file.setHeartRate(rowSet.getInt("HeartRate"));
	            file.setHeight(rowSet.getInt("Height"));
	            file.setHip(rowSet.getInt("Hip"));
	            file.setLdLip(rowSet.getFloat("LDLip"));
	            file.setMemberId(memberId);
	            file.setPulse(rowSet.getInt("Pulse"));
	            file.setTotalCholesterol(rowSet.getFloat("TotalCholesterol"));
	            file.setTriglyceride(rowSet.getFloat("Triglyceride"));
	            file.setUricAcid(rowSet.getInt("UricAcid"));
	            file.setWaist(rowSet.getInt("Waist"));
	            file.setWeight(rowSet.getFloat("Weight"));
		    	return file;
		    }
		    return null;
	}

	public void updateOmembyId(Omem omem) throws Exception {
		if(omem.getHeadAddress()==null||omem.getHeadAddress().equals("")){
		String sql="update omem set MemName = ?,Gender = ?,BirthDate = ?,IdCard = ?,NativeAddr =?,Address = ?,MarryStatus = ?,EducationStatus = ?,Occupation = ? where memberId=?";
		jdbcService.doExecuteSQL(sql, new Object[]{omem.getMemName(),omem.getGender(),omem.getBirthDate(),omem.getIdCard(),omem.getNativeAddr(),omem.getAddress(),omem.getMarryStatus(),omem.getEducationStatus(),omem.getOccupation(),omem.getMemberId()});
		}else {
			String sql="update omem set MemName = ?,Gender = ?,BirthDate = ?,IdCard = ?,NativeAddr =?,Address = ?,MarryStatus = ?,EducationStatus = ?,Occupation = ?,headAddress=? where memberId=?";
			jdbcService.doExecuteSQL(sql, new Object[]{omem.getMemName(),omem.getGender(),omem.getBirthDate(),omem.getIdCard(),omem.getNativeAddr(),omem.getAddress(),omem.getMarryStatus(),omem.getEducationStatus(),omem.getOccupation(),omem.getHeadAddress(),omem.getMemberId()});
		}
		
	}

	public int updateOmemPassWordByParam(int memberId, String oldPW,String newPW) throws Exception {
           String  sql="update memlog set passWord=? where memberId=? and passWord=? ";
          // System.out.println(PasswordEncryption.getMD5Password(oldPW+"zkhk")+"----------");
           int i=  jdbcService.doExecuteSQL(sql, new Object[]{PasswordEncryption.getMD5Password(newPW+"zkhk"),memberId,PasswordEncryption.getMD5Password(oldPW+"zkhk")});
		   return i;
	}

	public void updateOmemHeadImgbyId(MultipartFile headImg, int memberId)
			throws Exception {
		String sql="update omem set headImg=? where memberId="+memberId;
		jdbcService.updatOmemHeadImg(sql, headImg);
		
	}

	/**
	 * 获取会员活力指数
	 * @author liuxiaoqin
	 * @param memberId
	 */
	public float findMemActiveIndexByMemberId(int memberId) throws Exception {
		//获取会员最近30 天活力指数activeIndex
		float activeIndex = 0;
		String sql = "SELECT sum(score) FROM mem8 WHERE memberId = ? AND uploadTime > DATE_ADD(curdate(),INTERVAL -30 DAY) ";
		//会员最近30 天活力累计分数(monthActiveIndex)
		int monthActiveIndex=  jdbcService.queryForInt(sql, new Object[]{memberId});
		//取所有用户
		int allMem = getAllMem();
		
		//取所有用户前1/4的用户数量为
		int quarterMem = Math.round((float)allMem/4);
		
		String sqlQuarter = " SELECT avg(mm.totalScore) avgTotal FROM ( SELECT sum(score)totalScore FROM mem8 WHERE uploadTime > DATE_ADD(curdate(), INTERVAL -30 DAY) GROUP BY memberId ORDER BY totalScore DESC LIMIT ? )mm ";
		//所有会员累计积分从高到低排列，取前1/4所有用户的总积分平均值(avgActiveIndex)
		int avgActiveIndex = jdbcService.queryForInt(sqlQuarter, new Object[]{quarterMem});
		activeIndex = Math.round((float)monthActiveIndex*100/(float)avgActiveIndex);
		if (activeIndex>100) {
			activeIndex=100;
		}
		return activeIndex;
	}

	
	/**
	 * 获取最近30 天所有会员
	 * @author liuxiaoqin
	 * @return
	 * @throws Exception
	 */
	public int getAllMem() throws Exception{
		int allMem = 0;
		String sqlAll = " ( SELECT 1 FROM mem8 WHERE uploadTime > DATE_ADD(curdate(), INTERVAL -30 DAY) GROUP BY memberId ) mm ";
		//所有会员的最近30 天活力积分由高到低进行排序的总会员数
		allMem = jdbcService.getRecordCount(sqlAll);    
		return allMem;
	}

	public String findNameByMemberId(int memberId) throws Exception {
		String sql="SELECT MemName FROM omem where memberId=?";
		SqlRowSet rowSet=jdbcService.query(sql, new Object[]{memberId});
		if(rowSet.next()){
			return rowSet.getString("MemName");
		}
		return null;
	}

	
	public void insertMemLogByMemberid(MemLog loginLog) throws Exception {
		String sql="insert into memlog(memberid,password,curTag,`Session`,LoginTime,Device) values(?,?,?,?,?,?)";
		jdbcService.doExecuteSQL(sql, new Object[]{loginLog.getMemberId(),loginLog.getPassWord(),loginLog.getCurTag(),
				loginLog.getSession(),loginLog.getLoginTime(),loginLog.getDevice()} );
	}

	
	public MemberStatus queryMemberStatus(String  account) throws Exception {
		MemberStatus  memberStatus = new MemberStatus() ;

	    String sql ="SELECT o.`status` FROM omem  o WHERE (o.Memberid =? or o.TEL=? or o.Email=? or o.IdCard = ?)  and  o.useTag='T' ";
	    SqlRowSet rowSet=jdbcService.query(sql, new Object[]{account,account,account,account});
	    while(rowSet.next()){
	    	memberStatus.setStatus(rowSet.getString("status"));
	    	return memberStatus;
	    }
		return memberStatus;
	}
	
	
}

package com.zkhk.dao;


import java.util.List;

import org.springframework.web.multipart.MultipartFile;

import com.zkhk.entity.MemFile;
import com.zkhk.entity.MemLog;
import com.zkhk.entity.MemberStatus;
import com.zkhk.entity.Odoc;
import com.zkhk.entity.Omem;

/**
 * 会员管理类
 * @author bit
 *
 */
public interface MemDao {
    /**
     * 通过用户名和密码查询用户的登入信息
     * @param log
     * @return
     * @throws Exception
     */
	MemLog findUserbyNameAndPassWord(MemLog log) throws Exception;
   /**
    * 跟新用户的登入状态信息
    * @param loginLog
    * @throws Exception
    */
	void updateMemLogByMemberid(MemLog loginLog) throws Exception;
	/**
	 * 验证用户session和id是否可以登入
	 * @param session
	 * @param memberId
	 * @return
	 * @throws Exception
	 */
    boolean findUserBySessionAndId(String session, int memberId)throws Exception;
    /**
     * 通过会员id查询会员的基本信息
     * @param memberId
     * @return
     * @throws Exception
     */
	Omem findOmembyId(int memberId)throws Exception;
	/**
	 * 查询会员档案信息
	 * @param memberId
	 * @return
	 * @throws Exception
	 */
	MemFile findMemFilebyId(int memberId)throws Exception;
	
	/** 
     * <p>Title: updateOmembyId</p>  
     * <p>Description: 更新会员基本信息</p>
     * @author liuxiaoqin
     * @createDate 2016-04-12  
     * @param omem
     * @throws Exception 
     * @see com.zkhk.dao.MemDao#updateOmembyId(com.zkhk.entity.Omem)  
    */
	Integer updateOmembyId(Omem omem) throws Exception;
	/**
	 * 修改会员密码修改成被修改行数
	 * @param memberId
	 * @param oldPW
	 * @param newPW
	 * @return
	 * @throws Exception
	 */
	int updateOmemPassWordByParam(int memberId, String oldPW, String newPW)  throws Exception;
	/**
	 * 修改会员头像
	 * @param headImg
	 */
	void updateOmemHeadImgbyId(MultipartFile headImg,int memberId)throws Exception;
	
	/**
	 * 获取会员活力指数
	 * @param memberId
	 */
	float findMemActiveIndexByMemberId(int memberId) throws Exception;

   /**
    * 通过id查询用户的姓名
    * @param memberId
    * @return
    * @throws Exception
    */
	String findNameByMemberId(int memberId)throws Exception;

   /**
    * 插入用户的登入状态信息
    * @param loginLog
    * @throws Exception
    */
	void insertMemLogByMemberid(MemLog loginLog) throws Exception;	
	
	/**
	 * 查询验证用户账号是否被冻结
	 * @param memberId
	 * @return
	 * @throws Exception
	 */
	MemberStatus queryMemberStatus(String account)throws Exception;
	
	/** 
     * @Title: vaildIdCard 
     * @Description: 验证身份证是否被其他人占用
     * @param request
     * @author liuxiaoqin
     * @createDate 2016-04-23
     * @throws Exception    
     * @retrun String
     */
	public Integer vaildIdCard(String idcard) throws Exception;
	
	 /** 
     * @Title: vaildTel 
     * @Description: 验证手机号是否被其他人占用
     * @param request
     * @author liuxiaoqin
     * @createDate 2016-04-23
     * @throws Exception    
     * @retrun String
     */
	public Integer vaildTel(String tel) throws Exception;
	
	 /** 
     * @Title: vaildEmail 
     * @Description: 验证邮箱是否被其他人占用
     * @param request
     * @author liuxiaoqin
     * @createDate 2016-04-23
     * @throws Exception    
     * @retrun String
     */
	public Integer vaildEmail(String email) throws Exception;
	
	/** 
     * @Title: findSameOrgDoctors 
     * @Description: 会员查询同组织下的所有医生。
     * @param request
     * @author liuxiaoqin
     * @createDate 2016-06-30
     * @throws Exception    
     * @retrun doctorList
     */
    public List<Odoc> findSameOrgDoctors(Integer memberId,String searchName,Integer pageNow,Integer pageSize)throws Exception;
	
	
}

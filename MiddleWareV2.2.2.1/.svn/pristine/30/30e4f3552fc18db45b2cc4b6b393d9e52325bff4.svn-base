package com.zkhk.services;


import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.apache.log4j.Logger;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.hkbithealth.bean.ph.PHDiabetes;
import com.hkbithealth.bean.ph.PHDiabetesDetail;
import com.hkbithealth.bean.ph.PHHypertension;
import com.hkbithealth.bean.ph.PHHypertensionDetail;
import com.hkbithealth.bean.ph.PHOmem;
import com.hkbithealth.service.ph.PublicHealthService;
import com.zkhk.dao.VisitDao;
import com.zkhk.entity.CallValue;
import com.zkhk.entity.MemBasicInfo;
import com.zkhk.entity.MemSearch;
import com.zkhk.entity.ReturnResult;
import com.zkhk.entity.VisitParam;
import com.zkhk.util.TimeUtil;
import com.zkhk.util.VisitUtil;

@Service("docVisitService")
public class DocVisitServiceImpl implements DocVisitService {

	private Logger logger = Logger.getLogger(DocVisitServiceImpl.class);
	
	private PublicHealthService publicHealthService = PublicHealthService.getInstance();
	
	@Resource(name = "visitDao")
    private VisitDao visitDao;
	
	 /** 
     * @Title: findMemDiabetesVisitList 
     * @Description: 医生查询会员的糖尿病随访列表
     * @param request
     * @author liuxiaoqin
     * @createDate 2016-03-17
     * @throws Exception    
     * @retrun String
     */
    @SuppressWarnings("unchecked")
    public String findMemDiabetesVisitList(HttpServletRequest request) throws Exception{
        ReturnResult result = new ReturnResult();
        String params = request.getParameter("params");
        CallValue callValue = JSON.parseObject(params, CallValue.class);
        VisitParam param = JSON.parseObject(callValue.getParam(), VisitParam.class);
        int doctorId = callValue.getMemberId();
        if(doctorId <= 0){
            result.setState(1);
            result.setMessage("参数医生id【"+doctorId+"】应为正整数！");
            logger.info("参数医生id【"+doctorId+"】应为正整数！");
            return JSON.toJSONString(result);
        }
        boolean followUp = false;
        int hasVisited = param.getHasVisited();
        if(hasVisited > 0){
            followUp = true;
        }
        int pageNow = param.getPageNow();
        int pageSize = param.getPageSize();
        PHOmem omem = new PHOmem();
        omem.setDocid(doctorId);
        String searchName = param.getSearchName();
        if(!StringUtils.isEmpty(searchName)){
            omem.setMemName(searchName);
            omem.setIdCard(searchName);
        }
        List<PHDiabetes> diabetesList = (List<PHDiabetes>) publicHealthService.queryDiabetesPage(omem, null, null, pageNow, pageSize, followUp).getList();
        if(diabetesList.size() > 0){
            List<Map<String,Object>> mapList = new ArrayList<Map<String,Object>>();
            for(PHDiabetes diabetes : diabetesList){
                Map<String,Object> map = new HashMap<String, Object>();
                String date = "";
                Date visitDate = diabetes.getVisitDate();
                if(visitDate != null){
                    date = TimeUtil.formatDate(visitDate);
                }
                map.put("visitDate", date);
                map.put("diabetesId", diabetes.getDiabetesId());
                map.put("visitResult", diabetes.getVisitClassStr());
                PHOmem member = diabetes.getOmem();
                if(member != null){
                    map.put("memberID", member.getMemberid());
                    String memName = member.getMemName();
                    if(!StringUtils.isEmpty(memName)){
                        map.put("memName", memName);
                    }
                    String idcard = member.getIdCard();
                    if(!StringUtils.isEmpty(idcard)){
                        map.put("idcard", idcard);
                    }
                    String gender = member.getGender();
                    if(!StringUtils.isEmpty(gender)){
                        map.put("gender", gender);
                    }
                    Date newDate = omem.getBirthDate();
                    if(newDate != null){
                        String birthDate = TimeUtil.formatDate(newDate);
                        map.put("age", TimeUtil.getCurrentAgeByBirthdate(birthDate));
                    }
                }
                mapList.add(map);
            }
            result.setState(0);
            result.setMessage("医生查询会员的糖尿病随访列表");
            result.setContent(mapList);
            logger.info("医生查询会员的糖尿病随访列表");
        }else{
            result.setState(3);
            result.setMessage("没有该会员的糖尿病随访列表");
            logger.info("没有该会员的糖尿病随访列表");
        }
        return JSON.toJSONString(result);
    }
    
    /** 
     * @Title: findMemDiabetesVisitDetail 
     * @Description: 医生查询会员的糖尿病随访明细
     * @param request
     * @author liuxiaoqin
     * @createDate 2016-03-17
     * @throws Exception    
     * @retrun String
     */
    public String findMemDiabetesVisitDetail(HttpServletRequest request) throws Exception{
        ReturnResult result = new ReturnResult();
        String params = request.getParameter("params");
        CallValue callValue = JSON.parseObject(params, CallValue.class);
        JSONObject jsonObject = JSONObject.parseObject(callValue.getParam());
        long logId = jsonObject.getLong("logId");
        if(logId <= 0){
            result.setState(1);
            result.setMessage("参数logId【"+logId+"】应为正整数！");
            logger.info("参数logId【"+logId+"】应为正整数！");
            return JSON.toJSONString(result);
        }
        PHDiabetes visit = publicHealthService.queryDiabetesDetail(logId);
        if(visit != null){
            Map<String,Object> map = new HashMap<String, Object>();
            map.put("basicInfo", VisitUtil.getDiabeBasicInfo(visit));
            String date = "";
            Date visitDate = visit.getVisitDate();
            if(visitDate != null){
                date = TimeUtil.formatDate(visitDate);
            }
            map.put("visitDate",date);
            PHDiabetesDetail detail = visit.getDiabetesDetail();
            if(detail != null){
                map.put("visitWayStr",detail.getVisitWayStr());
                map.put("symptomStr", detail.getSymptomStr());
                map.put("rhgStr", detail.getRhgStr());
            }
            map.put("drugComplianceStr",detail.getDrugCompliStr());
            map.put("drugAdverseReactionStr", detail.getDrugAdverReaStr());
            map.put("transferReason",detail.getTransferReason());
            map.put("transferOrgAndDept",detail.getTransferOrgAndDept());
            String nextDate = "";
            Date newDate = detail.getVisitDateNext();
            if(newDate != null){
                nextDate = TimeUtil.formatDate(newDate);
            }
            map.put("nextVistDate",nextDate);
            map.put("visitDrName",visit.getVisitDrName());
            map.put("accessoryExamination",VisitUtil.getDiabeAccessoryExamination(visit));
            map.put("physicalSigns",VisitUtil.getDiabePhysicalSigns(visit));
            map.put("lifeStyle", VisitUtil.getDiabeLifeStyle(visit));
            map.put("medication",VisitUtil.getDiabeMedication(visit));
            result.setState(0);
            result.setMessage("医生查询会员的糖尿病随访明细成功");
            result.setContent(map);
            logger.info("医生查询会员的糖尿病随访明细成功");
        }else{
            result.setState(3);
            result.setMessage("没有该会员的糖尿病随访明细");
            logger.info("没有该会员的糖尿病随访明细");
        }
        return JSON.toJSONString(result);
    }
    
    /** 
     * @Title: findMemHypertensionVisitList 
     * @Description: 医生查询会员的高血压随访列表
     * @param request
     * @author liuxiaoqin
     * @createDate 2016-03-17
     * @throws Exception    
     * @retrun String
     */
    @SuppressWarnings("unchecked")
    public String findMemHypertensionVisitList(HttpServletRequest request) throws Exception{
        ReturnResult result = new ReturnResult();
        String params = request.getParameter("params");
        CallValue callValue = JSON.parseObject(params, CallValue.class);
        VisitParam param = JSON.parseObject(callValue.getParam(), VisitParam.class);
        int doctorId = callValue.getMemberId();
        if(doctorId <= 0){
            result.setState(1);
            result.setMessage("参数医生id【"+doctorId+"】应为正整数！");
            logger.info("参数医生id【"+doctorId+"】应为正整数！");
            return JSON.toJSONString(result);
        }
        boolean followUp = false;
        int hasVisited = param.getHasVisited();
        if(hasVisited > 0){
            followUp = true;
        }
        int pageNow = param.getPageNow();
        int pageSize = param.getPageSize();
        PHOmem omem = new PHOmem();
        omem.setDocid(doctorId);
        String searchName = param.getSearchName();
        if(!StringUtils.isEmpty(searchName)){
            omem.setMemName(searchName);
            omem.setIdCard(searchName);
        }
        List<PHHypertension> hypertensionList = (List<PHHypertension>) publicHealthService.queryHypertensionPage(omem, null, null, pageNow, pageSize, followUp).getList();
        if(hypertensionList.size() > 0){
            List<Map<String,Object>> mapList = new ArrayList<Map<String,Object>>();
            for(PHHypertension hypertension : hypertensionList){
                Map<String,Object> map = new HashMap<String, Object>();
                String date = "";
                Date visitDate = hypertension.getVisitDate();
                if(visitDate != null){
                    date = TimeUtil.formatDate(visitDate);
                }
                map.put("visitDate", date);
                map.put("hypertensionID", hypertension.getHypertensionID());
                map.put("visitResult", hypertension.getVisitClassStr());
                PHOmem member = hypertension.getOmem();
                if(member != null){
                    map.put("memberID", member.getMemberid());
                    String memName = member.getMemName();
                    if(!StringUtils.isEmpty(memName)){
                        map.put("memName", memName);
                    }
                    String idcard = member.getIdCard();
                    if(!StringUtils.isEmpty(idcard)){
                        map.put("idcard", idcard);
                    }
                    String gender = member.getGender();
                    if(!StringUtils.isEmpty(gender)){
                        map.put("gender", gender);
                    }
                    Date newDate = omem.getBirthDate();
                    if(newDate != null){
                        String birthDate = TimeUtil.formatDate(newDate);
                        map.put("age", TimeUtil.getCurrentAgeByBirthdate(birthDate));
                    }
                }
                mapList.add(map);
            }
            result.setState(0);
            result.setMessage("医生查询会员的高血压随访列表成功");
            result.setContent(mapList);
            logger.info("医生查询会员的高血压随访列表成功");
        }else{
            result.setState(3);
            result.setMessage("没有该会员的高血压随访列表");
            logger.info("没有该会员的高血压随访列表");
        }
        return JSON.toJSONString(result);
    }
    
    /** 
     * @Title: findMemHypertensionVisitDetail 
     * @Description: 医生查询会员的高血压随访明细
     * @param request
     * @author liuxiaoqin
     * @createDate 2016-03-17
     * @throws Exception    
     * @retrun String
     */
    public String findMemHypertensionVisitDetail(HttpServletRequest request) throws Exception{
        ReturnResult result = new ReturnResult();
        String params = request.getParameter("params");
        CallValue callValue = JSON.parseObject(params, CallValue.class);
        JSONObject jsonObject = JSONObject.parseObject(callValue.getParam());
        long logId = jsonObject.getLong("logId");
        if(logId <= 0){
            result.setState(1);
            result.setMessage("参数logId【"+logId+"】应为正整数！");
            logger.info("参数logId【"+logId+"】应为正整数！");
            return JSON.toJSONString(result);
        }
        PHHypertension visit = publicHealthService.queryHypertensionDetail(logId);
        if(visit != null){
            Map<String,Object> map = new HashMap<String, Object>();
            map.put("basicInfo", VisitUtil.getHyperBasicInfo(visit));
            String date = "";
            Date visitDate = visit.getVisitDate();
            if(visitDate != null){
                date = TimeUtil.formatDate(visitDate);
            }
            map.put("visitDate",date);
            PHHypertensionDetail detail = visit.getHypertensionDetail();
            if(detail != null){
                map.put("visitWayStr",detail.getVisitWayStr());
                map.put("symptomStr", detail.getSymptomStr());
            }
            map.put("drugComplianceStr",detail.getDrugCompliStr() );
            map.put("drugAdverseReactionStr", detail.getDrugAdverReaStr());
            map.put("checkResult",detail.getCheckResult() );
            map.put("transferReason",detail.getTransferReason() );
            map.put("transferOrgAndDept",detail.getTransferOrgAndDept());
            String nextDate = "";
            Date newDate = detail.getVisitDateNext();
            if(newDate != null){
                nextDate = TimeUtil.formatDate(newDate);
            }
            map.put("nextVistDate",nextDate);
            map.put("visitDrName",visit.getVisitDrName());
            map.put("physicalSigns",VisitUtil.getHyperPhysicalSigns(visit));
            map.put("lifeStyle", VisitUtil.getHyperLifeStyle(visit));
            map.put("medication",VisitUtil.getHyperMedication(visit));
            result.setState(0);
            result.setMessage("医生查询会员的高血压随访明细成功");
            result.setContent(map);
            logger.info("医生查询会员的高血压随访明细成功");
        }else{
            result.setState(3);
            result.setMessage("没有该会员的高血压随访明细");
            logger.info("没有该会员的高血压随访明细");
        }
        return JSON.toJSONString(result);
    }
    
    /** 
     * @Title: addOrModifyMemHypertensionVisit 
     * @Description: 医生新增或者修改会员的高血压随访
     * @param request
     * @author liuxiaoqin
     * @createDate 2016-03-17
     * @throws Exception    
     * @retrun String
     */
    public String addOrModifyMemHypertensionVisit(HttpServletRequest request) throws Exception{
        ReturnResult result = new ReturnResult();
        String params = request.getParameter("params");
        CallValue callValue = JSON.parseObject(params, CallValue.class);
        PHHypertension visit = JSON.parseObject(callValue.getParam(), PHHypertension.class);
        boolean isSuccess = publicHealthService.addOrModifyHypertension(visit);
        if(isSuccess){
            result.setState(0);
            result.setMessage("医生新增或者修改会员的高血压随访成功");
            logger.info("医生新增或者修改会员的高血压随访成功");
        }else{
            result.setState(1);
            result.setMessage("医生新增或者修改会员的高血压随访失败");
            logger.info("医生新增或者修改会员的高血压随访失败");
        }
        return JSON.toJSONString(result);
    }
    
    /** 
     * @Title: addOrModifyMemDiabetesVisit 
     * @Description: 医生新增或者修改会员的糖尿病随访
     * @param request
     * @author liuxiaoqin
     * @createDate 2016-03-17
     * @throws Exception    
     * @retrun String
     */
    public String addOrModifyMemDiabetesVisit(HttpServletRequest request) throws Exception{
        ReturnResult result = new ReturnResult();
        String params = request.getParameter("params");
        CallValue callValue = JSON.parseObject(params, CallValue.class);
        PHDiabetes visit = JSON.parseObject(callValue.getParam(), PHDiabetes.class);
        boolean isSuccess = publicHealthService.addOrModifyPhdiabetes(visit);
        if(isSuccess){
            result.setState(0);
            result.setMessage("医生新增或者修改会员的高血压随访成功");
            logger.info("医生新增或者修改会员的高血压随访成功");
        }else{
            result.setState(1);
            result.setMessage("医生新增或者修改会员的高血压随访失败");
            logger.info("医生新增或者修改会员的高血压随访失败");
        }
        return JSON.toJSONString(result);
    }
    
    /** 
     * @Title: findCanVisitDiabeteMem 
     * @Description: 医生获取可进行糖尿病随访的会员
     * @param request
     * @author liuxiaoqin
     * @createDate 2016-03-17
     * @throws Exception    
     * @retrun String
     */
    public String findCanVisitDiabeteMem(HttpServletRequest request) throws Exception{
        ReturnResult result = new ReturnResult();
        String params = request.getParameter("params");
        CallValue callValue = JSON.parseObject(params, CallValue.class);
        MemSearch memSearch = JSON.parseObject(callValue.getParam(), MemSearch.class);
        List<MemBasicInfo> memberList = visitDao.findCanVisitDiabeteMem(memSearch);
        if(memberList.size() > 0){
            result.setState(0);
            result.setContent(memberList);
            result.setMessage("医生获取可进行糖尿病随访的会员成功");
            logger.info("医生获取可进行糖尿病随访的会员成功");
        }else{
            result.setState(3);
            result.setMessage("医生查询不到可进行糖尿病随访的会员");
            logger.info("医生查询不到可进行糖尿病随访的会员");
        }
        return JSON.toJSONString(result);
    }
    
    /** 
     * @Title: findCanVisitHyperMem 
     * @Description: 医生获取可进行高血压随访的会员
     * @param request
     * @author liuxiaoqin
     * @createDate 2016-03-17
     * @throws Exception    
     * @retrun String
     */
    public String findCanVisitHyperMem(HttpServletRequest request) throws Exception{
        ReturnResult result = new ReturnResult();
        String params = request.getParameter("params");
        CallValue callValue = JSON.parseObject(params, CallValue.class);
        MemSearch memSearch = JSON.parseObject(callValue.getParam(), MemSearch.class);
        List<MemBasicInfo> memberList = visitDao.findCanVisitHyperMem(memSearch);
        if(memberList.size() > 0){
            result.setState(0);
            result.setContent(memberList);
            result.setMessage("医生获取可进行高血压随访的会员成功");
            logger.info("医生获取可进行高血压随访的会员成功");
        }else{
            result.setState(3);
            result.setMessage("医生查询不到可进行高血压随访的会员");
            logger.info("医生查询不到可进行高血压随访的会员");
        }
        return JSON.toJSONString(result);
    }
    
}

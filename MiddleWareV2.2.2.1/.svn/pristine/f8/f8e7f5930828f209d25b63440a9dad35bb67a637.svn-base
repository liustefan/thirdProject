package com.zkhk.services;


import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.apache.log4j.Logger;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.hkbithealth.bean.ph.PHDiabetes;
import com.hkbithealth.bean.ph.PHDiabetesDetail;
import com.hkbithealth.bean.ph.PHDiabetesDetailMedicine;
import com.hkbithealth.bean.ph.PHHypertension;
import com.hkbithealth.bean.ph.PHHypertensionDetail;
import com.hkbithealth.bean.ph.PHHypertensionDetailMedicine;
import com.hkbithealth.bean.ph.PHOmem;
import com.hkbithealth.service.ph.PublicHealthService;
import com.zkhk.dao.VisitDao;
import com.zkhk.entity.CallValue;
import com.zkhk.entity.MemBasicInfo;
import com.zkhk.entity.MemSearch;
import com.zkhk.entity.ReturnResult;
import com.zkhk.entity.VisitParam;
import com.zkhk.util.TimeUtil;
import com.zkhk.util.VisitUtil;

@Service("docVisitService")
public class DocVisitServiceImpl implements DocVisitService {

	private Logger logger = Logger.getLogger(DocVisitServiceImpl.class);
	
	private PublicHealthService publicHealthService = PublicHealthService.getInstance();
	
	@Resource(name = "visitDao")
    private VisitDao visitDao;
	
	 /** 
     * @Title: findMemDiabetesVisitList 
     * @Description: 医生查询会员的糖尿病随访列表
     * @param request
     * @author liuxiaoqin
     * @createDate 2016-03-17
     * @throws Exception    
     * @retrun String
     */
    @SuppressWarnings("unchecked")
    public String findMemDiabetesVisitList(HttpServletRequest request) throws Exception{
        ReturnResult result = new ReturnResult();
        String params = request.getParameter("params");
        CallValue callValue = JSON.parseObject(params, CallValue.class);
        VisitParam param = JSON.parseObject(callValue.getParam(), VisitParam.class);
        int doctorId = callValue.getMemberId();
        if(doctorId <= 0){
            result.setState(1);
            result.setMessage("参数医生id【"+doctorId+"】应为正整数！");
            logger.info("参数医生id【"+doctorId+"】应为正整数！");
            return JSON.toJSONString(result);
        }
        boolean followUp = false;
        int hasVisited = param.getHasVisited();
        if(hasVisited > 0){
            followUp = true;
        }
        int pageNow = param.getPageNow();
        int pageSize = param.getPageSize();
        PHOmem omem = new PHOmem();
        omem.setDocid(doctorId);
        String searchName = param.getSearchName();
        if(!StringUtils.isEmpty(searchName)){
            omem.setMemName(searchName);
            omem.setIdCard(searchName);
        }
        List<PHDiabetes> diabetesList = (List<PHDiabetes>) publicHealthService.queryDiabetesPage(omem, null, null, pageNow, pageSize, null, followUp).getList();
        if(diabetesList.size() > 0){
            List<Map<String,Object>> mapList = new ArrayList<Map<String,Object>>();
            for(PHDiabetes diabetes : diabetesList){
                Map<String,Object> map = new HashMap<String, Object>();
                String date = "";
                Date visitDate = diabetes.getVisitDate();
                if(visitDate != null){
                    date = TimeUtil.formatDate(visitDate);
                }
                map.put("visitDate", date);
                map.put("diabetesId", diabetes.getDiabetesId());
                map.put("visitResult", diabetes.getVisitClassStr());
                map.put("basicInfo", VisitUtil.getDiabeBasicInfo(diabetes));
                mapList.add(map);
            }
            result.setState(0);
            result.setMessage("医生查询会员的糖尿病随访列表");
            result.setContent(mapList);
            logger.info("医生查询会员的糖尿病随访列表");
        }else{
            result.setState(3);
            result.setMessage("没有该会员的糖尿病随访列表");
            logger.info("没有该会员的糖尿病随访列表");
        }
        return JSON.toJSONString(result);
    }
    
    /** 
     * @Title: findMemDiabetesVisitDetail 
     * @Description: 医生查询会员的糖尿病随访明细
     * @param request
     * @author liuxiaoqin
     * @createDate 2016-03-17
     * @throws Exception    
     * @retrun String
     */
    public String findMemDiabetesVisitDetail(HttpServletRequest request) throws Exception{
        ReturnResult result = new ReturnResult();
        String params = request.getParameter("params");
        CallValue callValue = JSON.parseObject(params, CallValue.class);
        JSONObject jsonObject = JSONObject.parseObject(callValue.getParam());
        long logId = jsonObject.getLong("logId");
        if(logId <= 0){
            result.setState(1);
            result.setMessage("参数logId【"+logId+"】应为正整数！");
            logger.info("参数logId【"+logId+"】应为正整数！");
            return JSON.toJSONString(result);
        }
        PHDiabetes visit = publicHealthService.queryDiabetesDetail(logId);
        if(visit != null){
            Map<String,Object> map = new HashMap<String, Object>();
            String date = "";
            Date visitDate = visit.getVisitDate();
            if(visitDate != null){
                date = TimeUtil.formatDate(visitDate);
            }
            map.put("visitDate",date);
            PHDiabetesDetail detail = visit.getDiabetesDetail();
            if(detail != null){
                map.put("visitWayStr",detail.getVisitWayStr());
                map.put("symptomStr", detail.getSymptomStr());
                map.put("rhgStr", detail.getRhgStr());
                map.put("drugComplianceStr",detail.getDrugCompliStr());
                map.put("drugAdverseReactionStr", detail.getDrugAdverReaStr());
                map.put("transferReason",detail.getTransferReason());
                map.put("transferOrgAndDept",detail.getTransferOrgAndDept());
                String nextDate = "";
                Date newDate = detail.getVisitDateNext();
                if(newDate != null){
                    nextDate = TimeUtil.formatDate(newDate);
                }
                map.put("nextVistDate",nextDate);
                map.put("visitDrName",visit.getVisitDrName());
                map.put("accessoryExamination",VisitUtil.getDiabeAccessoryExamination(visit));
                map.put("physicalSigns",VisitUtil.getDiabePhysicalSigns(visit));
                map.put("lifeStyle", VisitUtil.getDiabeLifeStyle(visit));
                map.put("medication",VisitUtil.getDiabeMedication(visit));
                result.setState(0);
                result.setMessage("医生查询会员的糖尿病随访明细成功");
                result.setContent(map);
                logger.info("医生查询会员的糖尿病随访明细成功");
            }else{
                result.setState(3);
                result.setMessage("没有该会员的糖尿病随访明细");
                logger.info("没有该会员的糖尿病随访明细");
            }
        }else{
            result.setState(3);
            result.setMessage("没有该会员的糖尿病随访明细");
            logger.info("没有该会员的糖尿病随访明细");
        }
        return JSON.toJSONString(result);
    }
    
    /** 
     * @Title: findMemHypertensionVisitList 
     * @Description: 医生查询会员的高血压随访列表
     * @param request
     * @author liuxiaoqin
     * @createDate 2016-03-17
     * @throws Exception    
     * @retrun String
     */
    @SuppressWarnings("unchecked")
    public String findMemHypertensionVisitList(HttpServletRequest request) throws Exception{
        ReturnResult result = new ReturnResult();
        String params = request.getParameter("params");
        CallValue callValue = JSON.parseObject(params, CallValue.class);
        VisitParam param = JSON.parseObject(callValue.getParam(), VisitParam.class);
        int doctorId = callValue.getMemberId();
        if(doctorId <= 0){
            result.setState(1);
            result.setMessage("参数医生id【"+doctorId+"】应为正整数！");
            logger.info("参数医生id【"+doctorId+"】应为正整数！");
            return JSON.toJSONString(result);
        }
        boolean followUp = false;
        int hasVisited = param.getHasVisited();
        if(hasVisited > 0){
            followUp = true;
        }
        int pageNow = param.getPageNow();
        int pageSize = param.getPageSize();
        PHOmem omem = new PHOmem();
        omem.setDocid(doctorId);
        String searchName = param.getSearchName();
        if(!StringUtils.isEmpty(searchName)){
            omem.setMemName(searchName);
            omem.setIdCard(searchName);
        }
        List<PHHypertension> hypertensionList = (List<PHHypertension>) publicHealthService.queryHypertensionPage(omem, null,null, null, pageNow, pageSize, followUp).getList();
        if(hypertensionList.size() > 0){
            List<Map<String,Object>> mapList = new ArrayList<Map<String,Object>>();
            for(PHHypertension hypertension : hypertensionList){
                Map<String,Object> map = new HashMap<String, Object>();
                String date = "";
                Date visitDate = hypertension.getVisitDate();
                if(visitDate != null){
                    date = TimeUtil.formatDate(visitDate);
                }
                map.put("visitDate", date);
                map.put("hypertensionID", hypertension.getHypertensionID());
                map.put("visitResult", hypertension.getVisitClassStr());
                map.put("basicInfo", VisitUtil.getHyperBasicInfo(hypertension));
                mapList.add(map);
            }
            result.setState(0);
            result.setMessage("医生查询会员的高血压随访列表成功");
            result.setContent(mapList);
            logger.info("医生查询会员的高血压随访列表成功");
        }else{
            result.setState(3);
            result.setMessage("没有该会员的高血压随访列表");
            logger.info("没有该会员的高血压随访列表");
        }
        return JSON.toJSONString(result);
    }
    
    /** 
     * @Title: findMemHypertensionVisitDetail 
     * @Description: 医生查询会员的高血压随访明细
     * @param request
     * @author liuxiaoqin
     * @createDate 2016-03-17
     * @throws Exception    
     * @retrun String
     */
    public String findMemHypertensionVisitDetail(HttpServletRequest request) throws Exception{
        ReturnResult result = new ReturnResult();
        String params = request.getParameter("params");
        CallValue callValue = JSON.parseObject(params, CallValue.class);
        JSONObject jsonObject = JSONObject.parseObject(callValue.getParam());
        long logId = jsonObject.getLong("logId");
        if(logId <= 0){
            result.setState(1);
            result.setMessage("参数logId【"+logId+"】应为正整数！");
            logger.info("参数logId【"+logId+"】应为正整数！");
            return JSON.toJSONString(result);
        }
        PHHypertension visit = publicHealthService.queryHypertensionDetail(logId);
        if(visit != null){
            Map<String,Object> map = new HashMap<String, Object>();
            String date = "";
            Date visitDate = visit.getVisitDate();
            if(visitDate != null){
                date = TimeUtil.formatDate(visitDate);
            }
            map.put("visitDate",date);
            PHHypertensionDetail detail = visit.getHypertensionDetail();
            if(detail != null){
                map.put("visitWayStr",detail.getVisitWayStr());
                map.put("symptomStr", detail.getSymptomStr());
                map.put("drugComplianceStr",detail.getDrugCompliStr() );
                map.put("drugAdverseReactionStr", detail.getDrugAdverReaStr());
                map.put("checkResult",detail.getCheckResult() );
                map.put("transferReason",detail.getTransferReason() );
                map.put("transferOrgAndDept",detail.getTransferOrgAndDept());
                String nextDate = "";
                Date newDate = detail.getVisitDateNext();
                if(newDate != null){
                    nextDate = TimeUtil.formatDate(newDate);
                }
                map.put("nextVistDate",nextDate);
                map.put("visitDrName",visit.getVisitDrName());
                map.put("physicalSigns",VisitUtil.getHyperPhysicalSigns(visit));
                map.put("lifeStyle", VisitUtil.getHyperLifeStyle(visit));
                map.put("medication",VisitUtil.getHyperMedication(visit));
                result.setState(0);
                result.setMessage("医生查询会员的高血压随访明细成功");
                result.setContent(map);
                logger.info("医生查询会员的高血压随访明细成功");
            }else{
                result.setState(3);
                result.setMessage("没有该会员的高血压随访明细");
                logger.info("没有该会员的高血压随访明细");
            }
        }else{
            result.setState(3);
            result.setMessage("没有该会员的高血压随访明细");
            logger.info("没有该会员的高血压随访明细");
        }
        return JSON.toJSONString(result);
    }
    
    /** 
     * @Title: addOrModifyMemHypertensionVisit 
     * @Description: 医生新增或者修改会员的高血压随访
     * @param request
     * @author liuxiaoqin
     * @createDate 2016-03-17
     * @throws Exception    
     * @retrun String
     */
    public String addOrModifyMemHypertensionVisit(HttpServletRequest request) throws Exception{
        ReturnResult result = new ReturnResult();
        String params = request.getParameter("params");
        CallValue callValue = JSON.parseObject(params, CallValue.class);
        JSONObject jsonObject = JSONObject.parseObject(callValue.getParam());
        Integer doctorId = callValue.getMemberId();
        if(doctorId < 0){
            result.setState(1);
            result.setMessage("参数医生memberId【"+doctorId+"】应为正整数！");
            logger.info("参数医生memberId【"+doctorId+"】应为正整数！");
            return JSON.toJSONString(result);
        }
        String doctorName = visitDao.findDoctorBasicInfo(doctorId).getDoctorName();
        Long hypertensionID = jsonObject.getLong("hypertensionID");
        ReturnResult resultFinal = new ReturnResult();
        if(hypertensionID <= 0){
            resultFinal = validAddHyperParam(doctorId,doctorName,jsonObject);
            if(resultFinal.getState() != 0){
                result.setState(resultFinal.getState());
                result.setMessage(resultFinal.getMessage());
                logger.info(resultFinal.getMessage());
                return JSON.toJSONString(result);
            }
            PHHypertension visit = (PHHypertension)resultFinal.getContent();
            boolean isSuccess = publicHealthService.addOrModifyHypertension(visit);
            if(isSuccess){
                result.setState(0);
                result.setMessage("医生新增会员的高血压随访成功");
                logger.info("医生新增会员的高血压随访成功");
            }else{
                result.setState(1);
                result.setMessage("医生新增会员的高血压随访失败");
                logger.info("医生新增会员的高血压随访失败");
            }
        }else{
            resultFinal = validModifyHyperParam(doctorId,doctorName,hypertensionID,jsonObject);
            if(resultFinal.getState() != 0){
                result.setState(resultFinal.getState());
                result.setMessage(resultFinal.getMessage());
                logger.info(resultFinal.getMessage());
                return JSON.toJSONString(result);
            }
            PHHypertension visit = (PHHypertension)resultFinal.getContent();
            boolean isSuccess = publicHealthService.addOrModifyHypertension(visit);
            if(isSuccess){
                result.setState(0);
                result.setMessage("医生修改会员的高血压随访成功");
                logger.info("医生修改会员的高血压随访成功");
            }else{
                result.setState(1);
                result.setMessage("医生修改会员的高血压随访失败");
                logger.info("医生修改会员的高血压随访失败");
            }
        }
        return JSON.toJSONString(result);
    }
    
    /** 
     * @Title: addOrModifyMemDiabetesVisit 
     * @Description: 医生新增或者修改会员的糖尿病随访
     * @param request
     * @author liuxiaoqin
     * @createDate 2016-03-17
     * @throws Exception    
     * @retrun String
     */
    public String addOrModifyMemDiabetesVisit(HttpServletRequest request) throws Exception{
        ReturnResult result = new ReturnResult();
        String params = request.getParameter("params");
        CallValue callValue = JSON.parseObject(params, CallValue.class);
        JSONObject jsonObject = JSONObject.parseObject(callValue.getParam());
        Integer doctorId = callValue.getMemberId();
        if(doctorId < 0){
            result.setState(1);
            result.setMessage("参数医生memberId【"+doctorId+"】应为正整数！");
            logger.info("参数医生memberId【"+doctorId+"】应为正整数！");
            return JSON.toJSONString(result);
        }
        String doctorName = visitDao.findDoctorBasicInfo(doctorId).getDoctorName();
        Long diabetesId = jsonObject.getLong("diabetesId");
        ReturnResult resultFinal = new ReturnResult();
        if(diabetesId <= 0){
            resultFinal = validAddDiabetesParam(doctorId,doctorName,jsonObject);
            if(resultFinal.getState() != 0){
                result.setState(resultFinal.getState());
                result.setMessage(resultFinal.getMessage());
                logger.info(resultFinal.getMessage());
                return JSON.toJSONString(result);
            }
            PHDiabetes visit = (PHDiabetes)resultFinal.getContent();
            boolean isSuccess = publicHealthService.addOrModifyPhdiabetes(visit);
            if(isSuccess){
                result.setState(0);
                result.setMessage("医生新增会员的糖尿病随访成功");
                logger.info("医生新增会员的糖尿病随访成功");
            }else{
                result.setState(1);
                result.setMessage("医生新增会员的糖尿病随访失败");
                logger.info("医生新增会员的糖尿病随访失败");
            }
        }else{
            resultFinal = validModifyDiabetesParam(doctorId,doctorName,diabetesId,jsonObject);
            if(resultFinal.getState() != 0){
                result.setState(resultFinal.getState());
                result.setMessage(resultFinal.getMessage());
                logger.info(resultFinal.getMessage());
                return JSON.toJSONString(result);
            }
            PHDiabetes visit = (PHDiabetes)resultFinal.getContent();
            boolean isSuccess = publicHealthService.addOrModifyPhdiabetes(visit);
            if(isSuccess){
                result.setState(0);
                result.setMessage("医生修改会员的糖尿病随访成功");
                logger.info("医生修改会员的糖尿病随访成功");
            }else{
                result.setState(1);
                result.setMessage("医生修改会员的糖尿病随访失败");
                logger.info("医生修改会员的糖尿病随访失败");
            }
        }
        return JSON.toJSONString(result);
    }
    
    /** 
     * @Title: findCanVisitDiabeteMem 
     * @Description: 医生获取可进行糖尿病随访的会员
     * @param request
     * @author liuxiaoqin
     * @createDate 2016-03-17
     * @throws Exception    
     * @retrun String
     */
    public String findCanVisitDiabeteMem(HttpServletRequest request) throws Exception{
        ReturnResult result = new ReturnResult();
        String params = request.getParameter("params");
        CallValue callValue = JSON.parseObject(params, CallValue.class);
        MemSearch memSearch = JSON.parseObject(callValue.getParam(), MemSearch.class);
        int diseaseId = memSearch.getDiseaseId();
        if(diseaseId < 0){
            result.setState(1);
            result.setMessage("参数diseaseId【"+diseaseId+"】应为正整数！");
            logger.info("参数diseaseId【"+diseaseId+"】应为正整数！");
            return JSON.toJSONString(result);
        }
        int doctorId = memSearch.getDoctorId();
        if(doctorId < 0){
            result.setState(1);
            result.setMessage("参数doctorId【"+doctorId+"】应为正整数！");
            logger.info("参数doctorId【"+doctorId+"】应为正整数！");
            return JSON.toJSONString(result);
        }
        List<MemBasicInfo> memberList = visitDao.findCanVisitDiabeteMem(memSearch);
        if(memberList.size() > 0){
            result.setState(0);
            result.setContent(memberList);
            result.setMessage("医生获取可进行糖尿病随访的会员成功");
            logger.info("医生获取可进行糖尿病随访的会员成功");
        }else{
            result.setState(3);
            result.setMessage("医生查询不到可进行糖尿病随访的会员");
            logger.info("医生查询不到可进行糖尿病随访的会员");
        }
        return JSON.toJSONString(result);
    }
    
    /** 
     * @Title: findCanVisitHyperMem 
     * @Description: 医生获取可进行高血压随访的会员
     * @param request
     * @author liuxiaoqin
     * @createDate 2016-03-17
     * @throws Exception    
     * @retrun String
     */
    public String findCanVisitHyperMem(HttpServletRequest request) throws Exception{
        ReturnResult result = new ReturnResult();
        String params = request.getParameter("params");
        CallValue callValue = JSON.parseObject(params, CallValue.class);
        MemSearch memSearch = JSON.parseObject(callValue.getParam(), MemSearch.class);
        int diseaseId = memSearch.getDiseaseId();
        if(diseaseId < 0){
            result.setState(1);
            result.setMessage("参数diseaseId【"+diseaseId+"】应为正整数！");
            logger.info("参数diseaseId【"+diseaseId+"】应为正整数！");
            return JSON.toJSONString(result);
        }
        int doctorId = memSearch.getDoctorId();
        if(doctorId < 0){
            result.setState(1);
            result.setMessage("参数doctorId【"+doctorId+"】应为正整数！");
            logger.info("参数doctorId【"+doctorId+"】应为正整数！");
            return JSON.toJSONString(result);
        }
        List<MemBasicInfo> memberList = visitDao.findCanVisitHyperMem(memSearch);
        if(memberList.size() > 0){
            result.setState(0);
            result.setContent(memberList);
            result.setMessage("医生获取可进行高血压随访的会员成功");
            logger.info("医生获取可进行高血压随访的会员成功");
        }else{
            result.setState(3);
            result.setMessage("医生查询不到可进行高血压随访的会员");
            logger.info("医生查询不到可进行高血压随访的会员");
        }
        return JSON.toJSONString(result);
    }
    
     /** 
     * @Title: validAddHyperParam 
     * @Description: 验证新增参数 
     * @param doctorId
     * @param doctorName
     * @author liuxiaoqin
     * @createDate 2016-04-04
     * @param hypertensionID
     * @param jsonObject
     * @return
     * @throws Exception    
     * @retrun ReturnResult
     */
    public ReturnResult validAddHyperParam(Integer doctorId,String doctorName,JSONObject jsonObject)throws Exception{
        ReturnResult result = new ReturnResult();
        PHHypertension visit = new PHHypertension();
        Integer memberID = jsonObject.getInteger("memberID");
        if(memberID < 0){
            result.setState(1);
            result.setMessage("参数memberID【"+memberID+"】应为正整数！");
        }
        visit.setMemberID(memberID);
        String uniqueID = jsonObject.getString("uniqueID");
        visit.setUniqueID(uniqueID);
        Integer refCompany = jsonObject.getInteger("refCompany");
        visit.setRefCompany(refCompany);
        String refDataPK = jsonObject.getString("refDataPK");
        visit.setRefDataPK(refDataPK);
        String idCard = jsonObject.getString("idCard");
        visit.setIdCard(idCard);
        String name = jsonObject.getString("name");
        visit.setName(name);
        String date = jsonObject.getString("visitDate");
        if(!StringUtils.isEmpty(date)){
            Date visitDate = TimeUtil.parseDate(date);
            visit.setVisitDate(visitDate);
        }
        visit.setVisitDrName(doctorName);
        Integer visitClass = jsonObject.getInteger("visitClass");
        visit.setVisitClass(visitClass);
        visit.setCreateDrID(doctorId);
        visit.setIsDeleted(0);
        visit.setCreateDrName(doctorName);
        visit.setGetTime(new Date());
        String detailStr = jsonObject.getString("hypertensionDetail");
        if(!StringUtils.isEmpty(detailStr)){
            PHHypertensionDetail hypertensionDetail = JSON.parseObject(detailStr, PHHypertensionDetail.class);
            visit.setHypertensionDetail(hypertensionDetail);
        }
        String medicineStr = jsonObject.getString("hyperDetailMedicines");
        if(!StringUtils.isEmpty(medicineStr)){
            List<PHHypertensionDetailMedicine> hyperDetailMedicines = JSON.parseArray(medicineStr, PHHypertensionDetailMedicine.class);
            visit.setHyperDetailMedicines(hyperDetailMedicines);
        }
        result.setState(0);
        result.setContent(visit);
        return result;
    }
    
     /** 
     * @Title: validModifyHyperParam 
     * @Description: 验证修改参数
     * @author liuxiaoqin
     * @createDate 2016-04-04 
     * @param doctorId
     * @param doctorName
     * @param hypertensionID
     * @param jsonObject
     * @return
     * @throws Exception    
     * @retrun ReturnResult
     */
    public ReturnResult validModifyHyperParam(Integer doctorId,String doctorName,Long hypertensionID,JSONObject jsonObject)throws Exception{
        ReturnResult result = new ReturnResult();
        PHHypertension visit = new PHHypertension();
        Integer memberID = jsonObject.getInteger("memberID");
        if(memberID < 0){
            result.setState(1);
            result.setMessage("参数memberID【"+memberID+"】应为正整数！");
            return result;
        }
        if(hypertensionID < 0){
            result.setState(1);
            result.setMessage("参数hypertensionID【"+hypertensionID+"】应为正整数！");
            return result;
        }
        visit.setMemberID(memberID);
        String uniqueID = jsonObject.getString("uniqueID");
        visit.setUniqueID(uniqueID);
        Integer refCompany = jsonObject.getInteger("refCompany");
        visit.setRefCompany(refCompany);
        String refDataPK = jsonObject.getString("refDataPK");
        visit.setRefDataPK(refDataPK);
        String idCard = jsonObject.getString("idCard");
        visit.setIdCard(idCard);
        String name = jsonObject.getString("name");
        visit.setName(name);
        String date = jsonObject.getString("visitDate");
        if(!StringUtils.isEmpty(date)){
            Date visitDate = TimeUtil.parseDate(date);
            visit.setVisitDate(visitDate);
        }
        visit.setVisitDrName(doctorName);
        Integer visitClass = jsonObject.getInteger("visitClass");
        visit.setVisitClass(visitClass);
        visit.setCreateDrID(doctorId);
        visit.setCreateDrName(doctorName);
        visit.setGetTime(new Date());
        visit.setUpdateDrID(doctorId);
        visit.setUpdateDrName(doctorName);
        visit.setUpdateTime(new Date());
        String detailStr = jsonObject.getString("hypertensionDetail");
        if(!StringUtils.isEmpty(detailStr)){
            PHHypertensionDetail hypertensionDetail = JSON.parseObject(detailStr, PHHypertensionDetail.class);
            visit.setHypertensionDetail(hypertensionDetail);
        }
        String medicineStr = jsonObject.getString("hyperDetailMedicines");
        if(!StringUtils.isEmpty(medicineStr)){
            List<PHHypertensionDetailMedicine> hyperDetailMedicines = JSON.parseArray(medicineStr, PHHypertensionDetailMedicine.class);
            visit.setHyperDetailMedicines(hyperDetailMedicines);
        }
        result.setState(0);
        result.setContent(visit);
        return result;
    }
    
    /** 
     * @Title: validAddDiabetesParam 
     * @Description: 验证新增糖尿病参数 
     * @param doctorId
     * @param doctorName
     * @author liuxiaoqin
     * @createDate 2016-04-04
     * @param hypertensionID
     * @param jsonObject
     * @return
     * @throws Exception    
     * @retrun ReturnResult
     */
    public ReturnResult validAddDiabetesParam(Integer doctorId,String doctorName,JSONObject jsonObject)throws Exception{
        ReturnResult result = new ReturnResult();
        PHDiabetes visit = new PHDiabetes();
        Integer memberID = jsonObject.getInteger("memberID");
        if(memberID < 0){
            result.setState(1);
            result.setMessage("参数memberID【"+memberID+"】应为正整数！");
        }
        visit.setMemberID(memberID);
        String uniqueId = jsonObject.getString("uniqueId");
        visit.setUniqueId(uniqueId);
        Integer refCompany = jsonObject.getInteger("refCompany");
        visit.setRefCompany(refCompany);
        String refDataPk = jsonObject.getString("refDataPk");
        visit.setRefDataPk(refDataPk);
        String idCard = jsonObject.getString("idCard");
        visit.setIdCard(idCard);
        String name = jsonObject.getString("name");
        visit.setName(name);
        String date = jsonObject.getString("visitDate");
        if(!StringUtils.isEmpty(date)){
            Date visitDate = TimeUtil.parseDate(date);
            visit.setVisitDate(visitDate);
        }
        visit.setVisitDrName(doctorName);
        Integer visitClass = jsonObject.getInteger("visitClass");
        visit.setVisitClass(visitClass);
        visit.setCreateDrID(doctorId);
        visit.setIsDeleted(0);
        visit.setCreateDrName(doctorName);
        visit.setGetTime(new Date());
        String detailStr = jsonObject.getString("diabetesDetail");
        if(!StringUtils.isEmpty(detailStr)){
            PHDiabetesDetail diabetesDetail = JSON.parseObject(detailStr, PHDiabetesDetail.class);
            visit.setDiabetesDetail(diabetesDetail);
        }
        String medicineStr = jsonObject.getString("diabetesDetailMedicines");
        if(!StringUtils.isEmpty(medicineStr)){
            List<PHDiabetesDetailMedicine> diabetesDetailMedicines = JSON.parseArray(medicineStr, PHDiabetesDetailMedicine.class);
            visit.setDiabetesDetailMedicines(diabetesDetailMedicines);
        }
        result.setState(0);
        result.setContent(visit);
        return result;
    }
    
     /** 
     * @Title: validModifyDiabetesParam 
     * @Description: 验证修改糖尿病参数
     * @author liuxiaoqin
     * @createDate 2016-04-04 
     * @param doctorId
     * @param doctorName
     * @param hypertensionID
     * @param jsonObject
     * @return
     * @throws Exception    
     * @retrun ReturnResult
     */
    public ReturnResult validModifyDiabetesParam(Integer doctorId,String doctorName,Long diabetesId,JSONObject jsonObject)throws Exception{
        ReturnResult result = new ReturnResult();
        PHDiabetes visit = new PHDiabetes();
        Integer memberID = jsonObject.getInteger("memberID");
        if(memberID < 0){
            result.setState(1);
            result.setMessage("参数memberID【"+memberID+"】应为正整数！");
            return result;
        }
        if(diabetesId < 0){
            result.setState(1);
            result.setMessage("参数diabetesId【"+diabetesId+"】应为正整数！");
            return result;
        }
        visit.setDiabetesId(diabetesId);
        visit.setMemberID(memberID);
        String uniqueId = jsonObject.getString("uniqueId");
        visit.setUniqueId(uniqueId);
        Integer refCompany = jsonObject.getInteger("refCompany");
        visit.setRefCompany(refCompany);
        String refDataPk = jsonObject.getString("refDataPk");
        visit.setRefDataPk(refDataPk);
        String idCard = jsonObject.getString("idCard");
        visit.setIdCard(idCard);
        String name = jsonObject.getString("name");
        visit.setName(name);
        String date = jsonObject.getString("visitDate");
        if(!StringUtils.isEmpty(date)){
            Date visitDate = TimeUtil.parseDate(date);
            visit.setVisitDate(visitDate);
        }
        visit.setVisitDrName(doctorName);
        Integer visitClass = jsonObject.getInteger("visitClass");
        visit.setVisitClass(visitClass);
        visit.setCreateDrID(doctorId);
        visit.setCreateDrName(doctorName);
        visit.setGetTime(new Date());
        visit.setUpdateDrID(doctorId);
        visit.setUpdateDrName(doctorName);
        visit.setUpdateTime(new Date());
        String detailStr = jsonObject.getString("diabetesDetail");
        if(!StringUtils.isEmpty(detailStr)){
            PHDiabetesDetail diabetesDetail = JSON.parseObject(detailStr, PHDiabetesDetail.class);
            visit.setDiabetesDetail(diabetesDetail);
        }
        String medicineStr = jsonObject.getString("diabetesDetailMedicines");
        if(!StringUtils.isEmpty(medicineStr)){
            List<PHDiabetesDetailMedicine> diabetesDetailMedicines = JSON.parseArray(medicineStr, PHDiabetesDetailMedicine.class);
            visit.setDiabetesDetailMedicines(diabetesDetailMedicines);
        }
        result.setState(0);
        result.setContent(visit);
        return result;
    }
    
}
